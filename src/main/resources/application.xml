<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:lang="http://www.springframework.org/schema/lang"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   					   http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
	   					   http://www.springframework.org/schema/lang
	   					   http://www.springframework.org/schema/lang/spring-lang-4.3.xsd
	   					   http://www.springframework.org/schema/tx
	   					   http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
	   					   http://www.springframework.org/schema/cache
	   					   http://www.springframework.org/schema/cache/spring-cache-4.3.xsd
	   					   http://www.springframework.org/schema/aop
	   					   http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
	   					   http://www.springframework.org/schema/context
	   					   http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- 包扫描 -->
	<context:component-scan base-package="com.ssm" />
	
	<!-- jdbc redis配置 -->
	<bean id="perConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:redis.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 开启动态代理 -->
	<aop:aspectj-autoproxy />
	
	<!-- 事务属性配置 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<!-- 事务传播属性 -->
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="query*" read-only="true"/>
			<tx:method name="select*" read-only="true"/>
			<tx:method name="*" rollback-for="java.lang.Throwing"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- aop切入配置 -->
	<aop:config>
		<aop:pointcut id="fooServiceOperation" expression="execution(* com.ssm.service.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation"/>
	</aop:config>
	
	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${driverName}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
	</bean>
	
	<!-- 配置数据源管理器 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 配置mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mybatis.xml" />
		<property name="typeAliasesPackage" value="com.ssm.domain" />
		<property name="mapperLocations" value="classpath:com/ssm/mapper/*.xml" />
	</bean>
	
	<!-- mybatis 扫描 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ssm.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<!-- redis数据源 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${maxIdle}" />
		<property name="maxTotal" value="${maxTotal}" />
		<property name="maxWaitMillis" value="${maxWaitMillis}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
	</bean>
	
	<!-- Spring-redis连接池管理工厂 -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${hostName}" />
		<property name="port" value="${port}" />
		<property name="password" value="${pass}" />
		<property name="timeout" value="${timeout}" />
		<property name="poolConfig" ref="poolConfig" />
	</bean>
	
	<!-- redis模板类，提供了对缓存的增删改查 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>
	
	<!-- StrRedisTemplate -->
	<bean id="strRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
	</bean>
	
	<!-- 使用中间类解决RedisCache.jedisConnectionFactory的静态注入，从而使MyBatis实现第三方缓存 -->
	<bean id="redisCacheTransfer" class="com.ssm.utils.RedisCacheTransferUtil">
		<property name="jedisConnectionFactory" ref="jedisConnectionFactory" />
	</bean>
	
	<!-- Redis缓存管理对象 -->
	<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg index="0" ref="redisTemplate" />
	</bean>
	
	<!-- 开启Spring缓存 -->
	<cache:annotation-driven cache-manager="cacheManager" />

</beans>